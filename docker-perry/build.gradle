import org.apache.tools.ant.filters.FixCrLfFilter;

def targetDockerHubRepository = rootProject.name

def dockerImageName = targetDockerHubOrganization + '/' + targetDockerHubRepository
def dockerTag = projectVersion

println "Release: " + isRelease
println "Docker Tag: " + dockerTag

def perryDistFileName = "perry-${projectVersion}.jar"
def dockerContextDir = "$project.parent.buildDir/docker-perry"

task dockerCopyScripts(type: Copy) {
    from projectDir
    into dockerContextDir
    include 'entrypoint.sh'
    filter(FixCrLfFilter.class, eol:FixCrLfFilter.CrLf.newInstance("lf"))
}

task dockerCopyConfig(type: Copy) {
    from "$project.parent.projectDir/config"
    into "$dockerContextDir/config"
    include 'perry*.yml'
    include '*.jceks'
    include '*.groovy'
}

task dockerCopyDist(type: Copy, dependsOn: project.parent.bootRepackage) {
    from "$project.parent.buildDir/libs"
    into "$dockerContextDir/libs"
    include perryDistFileName
}

task dockerfile(type: Copy) {
    from file("$projectDir/Dockerfile-perry.template")
    into dockerContextDir
    rename { file -> 'Dockerfile-perry' }
    expand(
        perry_dist_file_name: perryDistFileName
    )
}

task dockerCreateImage(type: Exec, dependsOn: [project.parent.checkDockerService, dockerCopyScripts, dockerCopyConfig, dockerCopyDist, dockerfile]) {
    environment << project.dockerEnvVars
    doFirst {
        commandLine 'docker', 'build', '-t', dockerImageName, '-f', "$dockerContextDir/Dockerfile-perry", dockerContextDir
    }
}

task dockerTagImage(type: Exec, dependsOn: project.parent.checkDockerService) {
    environment << project.dockerEnvVars
    doFirst {
        commandLine 'docker', 'tag', dockerImageName, "$dockerImageName:$dockerTag"
    }
}

task readArguments() {
    doLast{
        println "ReleaseDocker: " + isRelease
        println "Build: " + buildNumber
        println "Docker Tag: " + dockerTag
    }
}

task dockerPushTaggedVersion(type: Exec, dependsOn: [project.parent.checkDockerService, dockerTagImage]) {
    environment << project.dockerEnvVars
    doFirst {
        commandLine 'docker', 'push', "$dockerImageName:$dockerTag"
    }
    dockerTagImage.mustRunAfter(project.parent.checkDockerService)
}

task dockerPushLatestVersion(type: Exec, dependsOn: project.parent.checkDockerService) {
    environment << project.dockerEnvVars
    doFirst {
        commandLine 'docker', 'push', "$dockerImageName:latest"
    }
}

task dockerPerryPublish(dependsOn: [dockerCreateImage, dockerPushTaggedVersion, dockerPushLatestVersion]) {
    doLast {
        println "\nPerry $projectVersion is published"
    }
    dockerPushTaggedVersion.mustRunAfter(dockerCreateImage)
    dockerPushLatestVersion.mustRunAfter(dockerCreateImage)
}

