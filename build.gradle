import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'javax.interceptor', name: 'javax.interceptor-api', version: '1.2'
    }
}

plugins {
    id "java"
    id 'application'
    id "org.sonarqube" version "2.5"
    id 'org.springframework.boot' version '1.5.2.RELEASE'
    id "com.github.hierynomus.license" version "0.14.0"
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'maven-publish'
apply plugin: 'maven'
apply plugin: 'jacoco'

group = 'gov.ca.cwds.api'

description = """perry"""

sourceCompatibility = 1.8
targetCompatibility = 1.8

project.ext {
    configPath = "$rootProject.projectDir/config/"
    springVersion = "1.5.3.RELEASE"
    projectMajorVersion = '0.4.3.1-SNAPSHOT'
    mainclass = 'gov.ca.cwds.PerryApplication'

    releaseDocker = System.getProperty("ReleaseDocker")
    buildNumber = System.getProperty("BuildNumber")
//    projectVersion = projectMajorVersion + '-SNAPSHOT'
    projectVersion = projectMajorVersion
    targetDockerHubOrganization = System.env.DOCKERHUB_ORG ?: 'cwds'
    
    // assume that Windows users use the Docker Toolbox
    buildEnv = System.env.BUILD_ENV ?: (Os.isFamily(Os.FAMILY_WINDOWS) ? 'WIN_DEV' : 'JENKINS')
    devDockerHost = System.env.DEV_DOCKER_HOST ?: '192.168.99.100'
    devDockerPort = 2376
}

println "ReleaseDocker: " + releaseDocker
println "Build: " + buildNumber
println "Project Version: " + projectVersion
println "Project Major Version: " + projectMajorVersion

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/jacocoHtml"
    }
}

sonarqube {
    properties {
        property "sonar.jacoco.reportPath", "${buildDir}/jacoco/test.exec"
        property "sonar.jacoco.itReportPath", "${buildDir}/jacoco/integrationTest.exec"
    }
}

version = projectVersion
mainClassName = mainclass

bootRepackage {
    mainClass = 'gov.ca.cwds.PerryApplication'
}

repositories {
    maven {
        url "http://sonar.dev.cwds.io:8081/artifactory/repo"
    }
}

dependencies {
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: springVersion
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version:springVersion
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version:springVersion
    compile group:"org.springframework.boot", name:"spring-boot-starter-actuator", version:springVersion

    compile group: 'org.springframework.security.oauth', name: 'spring-security-oauth2', version:'2.0.13.RELEASE'
    compile group: 'org.webjars', name: 'angularjs', version:'1.4.3'
    compile group: 'org.webjars', name: 'jquery', version:'2.1.1'
    compile group: 'org.webjars', name: 'bootstrap', version:'3.2.0'
    compile group: 'org.webjars', name: 'webjars-locator', version:'0.32'
    compile group: 'io.swagger', name: 'swagger-jersey2-jaxrs', version: '1.5.9'
    compile group: 'io.swagger', name: 'swagger-annotations', version: '1.5.9'
    compile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.4.11'
    //h2 dev mode
    compile group: 'com.h2database', name: 'h2', version: '1.4.196'

    compile group: 'com.ibm', name: 'db2jcc4', version: '4.0.0'
    compile group: 'com.ibm', name: 'db2jcc_license_cisuz', version: '4.0.0'

    compile ('gov.ca.cwds.api:api-core:0.19.118') {
        exclude group: 'org.glassfish.jersey.core'
    }

    compile project(':jwt-security');

    compile group: 'javax.interceptor', name: 'javax.interceptor-api', version: '1.2'
    testCompile(group: 'org.springframework.boot', name: 'spring-boot-starter-test', version:'1.5.2.RELEASE') {
            exclude(module: 'commons-logging')
    }
    testCompile 'org.springframework:spring-test:4.3.0.RELEASE'
    testCompile 'org.mockito:mockito-core:2.0.54-beta'
    testCompile group: 'org.hamcrest', name: 'hamcrest-junit', version: '2.0.0.0'
    testCompile('org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:2.23.2') {
        exclude group: 'javax.servlet', module: 'javax.servlet-api'
        exclude group: 'junit', module: 'junit'
    }

    // https://mvnrepository.com/artifact/nl.jqno.equalsverifier/equalsverifier
    testCompile group: 'nl.jqno.equalsverifier', name: 'equalsverifier', version: '2.1.6'
    testCompile 'org.ow2.asm:asm-all:5.1'
    testCompile group: 'io.dropwizard', name: 'dropwizard-testing', version: '1.0.5'
}

test {
    exclude '**/smoketest/**'
}

task smokeTest(type: Test) {
    systemProperty 'perry.health.check.url', project.property('perry.health.check.url')
    include '**/smoketest/**'
}

publish.dependsOn ':shiro-security:publish'

def isPortOpen(host, port) {
    try {
        Socket socket = new Socket(host, port)
        socket.close()
        return true
    } catch (IOException e) {
        return false
    }
}

project.ext.dockerEnvVars = project.buildEnv != 'WIN_DEV' ? [:] : [
        DOCKER_CERT_PATH: System.getProperty("user.home") + '/.docker/machine/machines/default',
        DOCKER_HOST: "tcp://$project.devDockerHost:$project.devDockerPort",
        DOCKER_MACHINE_NAME: 'default',
        DOCKER_TLS_VERIFY: '1',
        COMPOSE_CONVERT_WINDOWS_PATHS: 'true'
]

// reused in sub-modules
task checkDockerService {
    enabled = project.buildEnv == 'WIN_DEV'
    doFirst {
        if (!isPortOpen(project.devDockerHost, project.devDockerPort)) {
            throw new GradleException('Docker service is not available. Windows users should start Docker Quickstart Terminal of Docker Toolbox')
        }
    }
}

task publishDocker(dependsOn: ':docker-perry:dockerPerryPublish') {
    doLast {
        println 'Published'
    }
}

javadoc {
    options.addStringOption("charset", "UTF-8")
}

task integrationTest(type: Test, dependsOn: testClasses) {
    include '**/*IT*'
    exclude '**/*Test*'
}
